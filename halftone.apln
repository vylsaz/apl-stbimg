:Namespace halftone
  (⎕IO ⎕ML)←0 1

  ⎕SE.SALT.Load'HttpCommand -nolink'
  ⎕FIX'file://stbimg.aplc'

  ⍝ stbimg can't save 1-bit images, only 8 bits per channel.
  ⍝ still, it should be fun to look at.

  ToLuminance←{
    ⍝ ⍵ ←→ normalized r g b
    ⍝ r ←→ normalized luminance/grayscale
    0.299 0.587 0.114+.×⍵
  }

  ∇ r←(weight _ErrorDiffusion_ coords) img;shp;len;o;i;y
    :If weight≢⍥≢coords ⋄ ⎕SIGNAL 5 ⋄ :EndIf
    shp←⍴img
    len←×/shp
    o←(shp⊥⊢)¨coords
    r←(len+⌈/o)↑,img
    :For i :In ⍳len  ⍝ this is a very sequential algorithm.
      r[i+o]+←weight×y-r[i]←0.5<y←r[i]
      ⍝      │        │    └─ apply threshold
      ⍝      │        └─ quantization error
      ⍝      └─ distribute error to neighbours
    :EndFor
    r←shp⍴r
  ∇

  Jarvis←{
    weight←(⊢÷+/)7 5 3 5 7 5 3 1 3 5 3 1
    coords←3↓,-∘0 2¨⍳3 5
    (weight _ErrorDiffusion_ coords)⍵
  }

  Floyd_Steinberg←{
    weight←(⊢÷+/)7 3 5 1
    coords←2↓,-∘0 1¨⍳2 3
    (weight _ErrorDiffusion_ coords)⍵
  }

  ⍝ https://beyondloom.com/blog/dither.html
  Atkinson←{
    weight←8÷⍨6⍴1
    coords←(0 1)(0 2)(1 ¯1)(1 0)(1 1)(2 0)
    (weight _ErrorDiffusion_ coords)⍵
  }

  RandomDither←{
    w←(⍺,⍨-⍺)(16808⌶)'Uniform'(⍴⍵)
    0.5<w+⍵
  }

  LowPass←{
    k←9÷⍨3 3⍴1
    k+.×⍨⍥(,⍤2)({⍵}⌺3 3)⍵
  }

  Bayer←{
    b←2 2⍴0 2 3 1
    ⍵≡0:b
    ,[0 1],[2 3]0 2 1 3⍉b∘.+4×∇⍵-1 ⍝ a generalized Kronecker product
    ⍝ - outer product but the rank remains 2.
  }

  ⍝ https://github.com/LdBeth/pnmaster/blob/main/APL_code/Image/tiling.aplf
  Tile←{⍵⍴⍵[1](⍴⍤1)⍺}  ⍝ resize ⍺ (2D) to shape ⍵

  _orderedDither←{
    p←(1∘+÷×/∘⍴) ⍺⍺ ⍺  ⍝ pre-calculated weight
    1<⍵+p Tile⍴⍵       ⍝ apply weight, then threshold
  }

  ∇ Demo i;F;H;h;y;r
    F←{'<figure>',⍺,'<figcaption>',⍵,'</figcaption></figure>'}
    H←stbimg.(EmitHTML∘Denormalize)

    h←'<!DOCTYPE html><html><head><title>demo</title>'
    h,←'<style>div{display:flex;flex-wrap:wrap;}</style>'
    h,←'</head><body><div>'
    
    h,←(stbimg.EmitHTML i) F ⎕←'original'

    y←(ToLuminance⍤1)stbimg.Normalize i

    ⍝ simply threshold
    r←y>0.5
    h,←(H r) F ⎕←'threshold'

    ⍝ more detail, but looks not that good
    r←0.1 RandomDither y
    h,←(H r) F ⎕←'random dither'

    ⍝ uses Bayer matrix
    r←2 (Bayer _orderedDither) y
    h,←(H r) F ⎕←'ordered dither'

    ⍝ this algorithm is hard to parallelize...
    r←Atkinson y
    h,←(H r) F ⎕←'error diffusion'

    ⍝ what if we filter out the noisy parts?
    ⍝ i.e. take the average in a window
    ⍝ this is how halftoning works, because
    ⍝ human eyes act like a low pass filter
    h,←(H LowPass r) F ⎕←'low pass filter'

    h,←'</div></body></html>'
    
    'hr'⎕WC'HTMLRenderer'h
  ∇

  ∇ Run;u;g
    :If 0=⎕NC'#.HttpCommand'
      ('Please',(⎕UCS 13),'      ]load HttpCommand')⎕SIGNAL 6
    :EndIf
    u←'https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png'
    ⎕←g←#.HttpCommand.Get u
    Demo stbimg.(RGB LoadMem ⊢)g.Data
  ∇
:EndNamespace
